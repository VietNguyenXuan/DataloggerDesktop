// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var welcome6 = Welcome6.FromJson(jsonString);

namespace CodeBeautify
{
  using System;
  using System.Collections.Generic;

  using System.Globalization;
  using Newtonsoft.Json;
  using Newtonsoft.Json.Converters;

  public partial class Welcome6
  {
    [JsonProperty("msg")]
    public Msg Msg { get; set; }

    [JsonProperty("content")]
    public Content Content { get; set; }
  }

  public partial class Content
  {
    [JsonProperty("controller")]
    public Controller Controller { get; set; }

    [JsonProperty("tanks")]
    public object[] Tanks { get; set; }

    [JsonProperty("devices")]
    public Device[] Devices { get; set; }
  }

  public partial class Controller
  {
    [JsonProperty("operation_mode")]
    public string OperationMode { get; set; }
  }

  public partial class Device
  {
    [JsonProperty("solution")]
    public Solution[] Solution { get; set; }

    [JsonProperty("serial")]
    public string Serial { get; set; }

    [JsonProperty("value")]
    public string Value { get; set; }
  }

  public partial class Solution
  {
    [JsonProperty("env")]
    public string Env { get; set; }

    [JsonProperty("value")]
    [JsonConverter(typeof(ParseStringConverter))]
    public long Value { get; set; }
  }

  public partial class Msg
  {
    [JsonProperty("title")]
    public string Title { get; set; }

    [JsonProperty("sender")]
    public string Sender { get; set; }

    [JsonProperty("group")]
    public string Group { get; set; }

    [JsonProperty("date")]
    public long Date { get; set; }
  }

  public partial class Welcome6
  {
    public static Welcome6 FromJson(string json) => JsonConvert.DeserializeObject<Welcome6>(json, CodeBeautify.Converter.Settings);
  }

  public static class Serialize
  {
    public static string ToJson(this Welcome6 self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
  }

  internal static class Converter
  {
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
      MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
      DateParseHandling = DateParseHandling.None,
      Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
  }

  internal class ParseStringConverter : JsonConverter
  {
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
      if (reader.TokenType == JsonToken.Null) return null;
      var value = serializer.Deserialize<string>(reader);
      long l;
      if (Int64.TryParse(value, out l))
      {
        return l;
      }
      throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
      if (untypedValue == null)
      {
        serializer.Serialize(writer, null);
        return;
      }
      var value = (long)untypedValue;
      serializer.Serialize(writer, value.ToString());
      return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
  }
}
