// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var welcome2 = Welcome2.FromJson(jsonString);

namespace CodeBeautify
{
  using System;
  using System.Collections.Generic;

  using System.Globalization;
  using System.Text.Json.Serialization;
  using System.Text.Json;
  using Newtonsoft.Json;
  using Newtonsoft.Json.Converters;
  using JsonConverter = Newtonsoft.Json.JsonConverter;
  using JsonSerializer = Newtonsoft.Json.JsonSerializer;

  public partial class Welcome2
  {
    [JsonProperty("sensors")]
    public Sensor[] Sensors { get; set; }

    [JsonProperty("Id")]
    public Guid Id { get; set; }

    [JsonProperty("CreateDate")]
    public DateTimeOffset CreateDate { get; set; }

    [JsonProperty("UpdateDate")]
    public DateTimeOffset UpdateDate { get; set; }

    [JsonProperty("Name")]
    public object Name { get; set; }
  }

  public partial class Sensor
  {
    [JsonProperty("Name")]
    public string Name { get; set; }

    [JsonProperty("registers")]
    public Register[] Registers { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }
  }

  public partial class Register
  {
    [JsonProperty("Name")]
    public string Name { get; set; }

    [JsonProperty("Description")]
    public Description Description { get; set; }

    [JsonProperty("Value")]
    public long Value { get; set; }
  }

  public enum Description { Ac };

  public partial class Welcome2
  {
    public static Welcome2[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome2[]>(json, CodeBeautify.Converter.Settings);
  }

  public static class Serialize
  {
    public static string ToJson(this Welcome2[] self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
  }

  internal static class Converter
  {
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
      MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
      DateParseHandling = DateParseHandling.None,
      Converters =
            {
                DescriptionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
  }

  internal class DescriptionConverter : JsonConverter
  {
    public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
      if (reader.TokenType == JsonToken.Null) return null;
      var value = serializer.Deserialize<string>(reader);
      if (value == "ac")
      {
        return Description.Ac;
      }
      throw new Exception("Cannot unmarshal type Description");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
      if (untypedValue == null)
      {
        serializer.Serialize(writer, null);
        return;
      }
      var value = (Description)untypedValue;
      if (value == Description.Ac)
      {
        serializer.Serialize(writer, "ac");
        return;
      }
      throw new Exception("Cannot marshal type Description");
    }

    public static readonly DescriptionConverter Singleton = new DescriptionConverter();
  }
}
